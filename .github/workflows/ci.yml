name: Continuous Integration

on:
  push:
    branches: ['**']
  workflow_dispatch:

env:
  ImageName: rutkowski-tomasz/expensesplitter-api
  BuildContext: .
  Dockerfile: src/ExpenseSplitter.Api.Presentation/Dockerfile
  Registry: ghcr.io
  PushImage: ${{ github.ref == 'refs/heads/main' }}

jobs:
  test:
    name: Test
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Dotnet
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: '9.0.x'

      - name: Restore coverage history
        uses: actions/cache/restore@v4
        with:
          path: CoverageHistory
          key: coverage-history-${{ github.ref_name }}-${{ github.sha }}
          restore-keys: |
            coverage-history-${{ github.ref_name }}-
            coverage-history-main-
        continue-on-error: true

      - name: Test
        run: dotnet test --collect:"XPlat Code Coverage" *.sln

      - name: Generate report
        uses: danielpalme/ReportGenerator-GitHub-Action@5.4.4
        with:
          reports: 'test/*Test*/TestResults/*/coverage.cobertura.xml'
          targetdir: 'CoverageReports'
          historydir: 'CoverageHistory'
          reporttypes: 'HtmlInline;Cobertura;MarkdownSummaryGithub'
          filefilters: '-*/Migrations/*'

      - name: Upload coverage report
        uses: actions/upload-artifact@v4
        with:
          name: CoverageReports
          path: CoverageReports

      - name: Save coverage history
        uses: actions/cache/save@v4
        with:
          path: CoverageHistory
          key: coverage-history-${{ github.ref_name }}-${{ github.sha }}
          enableCrossOsArchive: false

      - name: Publish coverage in build summary
        run: cat CoverageReports/SummaryGithub.md >> $GITHUB_STEP_SUMMARY

  scan:
    name: Scan
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - name: SonarQube Scan
        uses: sonarsource/sonarqube-scan-action@v5.0.0
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
          SONAR_HOST_URL: https://sonarcloud.io

  version:
    name: Version
    runs-on: ubuntu-latest
    permissions:
      contents: write
    outputs:
      new_version: ${{ steps.version.outputs.new_version }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Bump version and tag
        id: version
        uses: mathieudutour/github-tag-action@v6.2
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}

      - name: Create a GitHub release
        if: ${{ env.PushImage == 'true' }}
        uses: ncipollo/release-action@v1
        with:
          tag: ${{ steps.version.outputs.new_tag }}
          name: ${{ steps.version.outputs.new_tag }}
          body: ${{ steps.version.outputs.changelog }}

      - name: Ouput version in summary
        run: |
          echo "🏷️ Version: ${{ steps.version.outputs.new_version }}" >> $GITHUB_STEP_SUMMARY
          if ${{ env.PushImage == 'true' }}; then
            echo "📌 Release Tag: ${{ steps.version.outputs.new_tag }}" >> $GITHUB_STEP_SUMMARY
          fi

  migrate:
    name: DB Migration Script
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Dotnet
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: '9.0.x'

      # Alternative: dotnet ef migrations bundle
      - name: Create migration script
        run: |
          dotnet tool install --global dotnet-ef
          dotnet ef migrations script --project src/ExpenseSplitter.Api.Infrastructure --startup-project src/ExpenseSplitter.Api.Presentation  --output migration.sql --idempotent

      - name: Upload migration script
        uses: actions/upload-artifact@v4
        with:
          name: migration.sql
          path: migration.sql
        
  image:
    name: Container Image
    needs: [test, scan, version, migrate]
    permissions:
      packages: write
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to image registry
        if: ${{ env.PushImage == 'true' }}
        uses: docker/login-action@v3
        with:
          registry: ${{ env.Registry }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Construct image tag
        id: image_tag
        run: |
          image_tag=$(echo "${{ env.Registry }}/${{ env.ImageName }}" | tr '[:upper:]' '[:lower:]')
          echo "image_tag=$image_tag" >> "$GITHUB_OUTPUT"

      - name: Build image
        uses: docker/build-push-action@v6
        with:
          context: ${{ env.BuildContext }}
          file: ${{ env.Dockerfile }}
          push: ${{ env.PushImage == 'true' }}
          tags: '${{ steps.image_tag.outputs.image_tag }}:${{ needs.version.outputs.new_version }}'
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@0.30.0
        if: ${{ env.PushImage == 'true' }}
        with:
          image-ref: '${{ steps.image_tag.outputs.image_tag }}:${{ needs.version.outputs.new_version }}'
          format: 'table'
          exit-code: '1'
          ignore-unfixed: true
          vuln-type: 'os,library'
          severity: 'HIGH,CRITICAL'
